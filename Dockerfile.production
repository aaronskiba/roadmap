FROM surnet/alpine-wkhtmltopdf:3.20.2-0.12.6-small AS wkhtmltopdf

FROM ruby:3.1.4-alpine AS builder

ENV INSTALL_PATH=/usr/src/app \
    RAILS_ENV=production \
    NODE_ENV=production \
    BUNDLE_WITHOUT='development:test:mysql:aws:sandbox:ci:wkhtmltopdf' \
    # Dummy values to enable `rake assets:precompile` without a real db
    DATABASE_URL=nulldb://nohost \
    SECRET_KEY_BASE=foo

# - build-base && musl-dev: required for compiling native extensions
# - postgresql-dev: required to compile pg gem
# - shared-mime-info:: required to compile mimemagic gem
# - tzdata: required to compile tzinfo gem
RUN apk add --no-cache \
    build-base musl-dev postgresql-dev git nodejs yarn shared-mime-info tzdata

WORKDIR $INSTALL_PATH

# For Bundler caching
COPY Gemfile* $INSTALL_PATH
RUN gem install bundler -v "$(tail -1 Gemfile.lock | tr -d " ")" && \
    bundle config set --local frozen 'true' && \
    # `deployment` flag installs gems to `vendor/bundle` directory
    # https://bundler.io/guides/deploying.html#deploying-your-application
    bundle config set --local deployment 'true' && \
    bundle install --jobs=3 --retry=3

# For Yarn caching
COPY package.json yarn.lock $INSTALL_PATH
RUN yarn install --prod --frozen-lockfile --check-files

# Node.js is required in the production image.
# Copy all libraries required by the Node.js binary into /node-lib
# This saves us from copying the entire /usr/lib builder directory
RUN mkdir -p /node-lib && \
    ldd /usr/bin/node | awk '/=>/ { print $3 }' | xargs -I '{}' cp '{}' /node-lib

COPY . $INSTALL_PATH

# Precompile assets within builder stage
RUN bundle exec rake assets:precompile && \
rm -rf ${INSTALL_PATH}/node_modules ${INSTALL_PATH}/tmp/*

FROM ruby:3.1.4-alpine AS production

ARG BASE_URL
ENV INSTALL_PATH=/usr/src/app \
    # Used for HEALTHCHECK
    BASE_URL=$BASE_URL \
    # Needed for gettext gem
    LANG=en_CA.UTF-8 \
    LC_ALL=en_CA.UTF-8

# - postgresql-client: Required for pg gem to connect to PostgreSQL
# - wget: Required for healthcheck
RUN apk add --no-cache \
    postgresql-client wget \
    # Install dependencies for wkhtmltopdf (See https://github.com/Surnet/docker-wkhtmltopdf/pkgs/container/alpine-wkhtmltopdf#other-images)
    libstdc++ \
    libx11 \
    libxrender \
    libxext \
    libssl3 \
    ca-certificates \
    fontconfig \
    freetype \
    ttf-dejavu \
    ttf-droid \
    ttf-freefont \
    ttf-liberation \
    # more fonts
  && apk add --no-cache --virtual .build-deps \
    msttcorefonts-installer \
  # Install microsoft fonts
  && update-ms-fonts \
  && fc-cache -f \
  # Clean up when done
  && rm -rf /tmp/* \
  && apk del .build-deps 

WORKDIR $INSTALL_PATH

# Copy binaries for wkhtmltopdf and node
COPY --from=wkhtmltopdf /bin/wkhtmltopdf /usr/bin/wkhtmltopdf
COPY --from=builder /usr/bin/node /usr/bin/node
# Copy shared libraries for Node.js
COPY --from=builder /node-lib/ /usr/lib/
# Copy data for timezone and mime types
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /usr/share/mime /usr/share/mime
# Copy application code and dependencies from builder stage
COPY --from=builder $INSTALL_PATH $INSTALL_PATH

# Run container as non-root user
RUN addgroup -S dmpgroup && adduser -S dmpuser -G dmpgroup && \
    # Update ownership of files that need to be writable during production runtime
    chown -R dmpuser:dmpgroup ${INSTALL_PATH}/tmp \
    ${INSTALL_PATH}/public/ \
    # For executing translation:sync
    ${INSTALL_PATH}/config/locale \
    ${INSTALL_PATH}/config/locales

USER dmpuser

EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD wget -qO- ${BASE_URL}/api/v1/heartbeat || exit 1
