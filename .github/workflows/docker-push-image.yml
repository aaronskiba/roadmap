# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish Docker image

on:
  release:
    types: [published]

jobs:
  push_to_registry:
    name: Push Docker images to Docker Hub
    runs-on: ubuntu-20.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      # Buildx allows for advanced Docker build features like multi-platform builds and layer caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ualbertalib/dmp_roadmap
          tags: |
            type=match,pattern=.+portage-(\d\.\d\.\d),group=1
            type=raw,value=production

      - name: Cache Gem dependencies
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          # The unique cache key is the OS plus the Gemfile.lock hash
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          # Fallback keys if the unique cache key is not found
          # - Helps speed up builds when Gemfile.lock changes slightly
          restore-keys: |
            ${{ runner.os }}-gems-${{ hashFiles('Gemfile') }}
            ${{ runner.os }}-gems-

      - name: Build and push the web stage image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: Dockerfile.production
          target: web
          push: true
          tags: web-${{ steps.meta.outputs.tags }}
          # Fetch existing build cache from Docker Hub, if available
          cache-from: type=registry,ref=ualbertalib/dmp_roadmap:build-cache
          # Push the updated build cache to Docker Hub
          cache-to: type=registry,ref=ualbertalib/dmp_roadmap:build-cache,mode=max
          # SERVER_NAME is used to set `server_name` in nginx.conf
          build-args: |
            SERVER_NAME=uat.library.ualberta.ca

      - name: Build and push the api stage image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: Dockerfile.production
          target: api
          push: true
          tags: api-${{ steps.meta.outputs.tags }}
          # Fetch existing build cache from Docker Hub, if available
          cache-from: type=registry,ref=ualbertalib/dmp_roadmap:build-cache
          # Push the updated build cache to Docker Hub
          cache-to: type=registry,ref=ualbertalib/dmp_roadmap:build-cache,mode=max
          # BASE_URL is used to set url for HEALTHCHECK in Dockerfile.production
          build-args: |
            BASE_URL=https://uat.library.ualberta.ca:3000
