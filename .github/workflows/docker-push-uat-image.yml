# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish Docker UAT image

on:
  push:
    tags: 
      - '*-uat-*'

jobs:
  push_to_registry:
    name: Push Docker UAT images to Docker Hub
    runs-on: ubuntu-20.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      # Buildx allows for advanced Docker build features like multi-platform builds and layer caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Extract metadata for web image
      - name: Extract metadata (tags) for Docker web image
        id: meta_web
        uses: docker/metadata-action@v3
        with:
          images: aaronskiba/roadmap
          flavor: |
            suffix=-web,onlatest=true
          tags: |
            type=match,pattern=.+portage-(\d+\.\d+\.\d+-uat-\d+),group=1
            type=raw,value=uat
      
      # Extract metadata for api image
      - name: Extract metadata (tags) for Docker api Image
        id: meta_api
        uses: docker/metadata-action@v3
        with:
          images: aaronskiba/roadmap
          flavor: |
            suffix=-api,onlatest=true
          tags: |
            type=match,pattern=.+portage-(\d+\.\d+\.\d+-uat-\d+),group=1
            type=raw,value=uat

      # The `web` and `api` images depend on the same Dockerfile.production `builder` stage (where the Gemfile.lock is handled)
      # Since both images share this stage, they can use the same job step for caching dependencies
      - name: Cache Gem dependencies
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          # The unique cache key is the OS plus the Gemfile.lock hash
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          # Fallback keys if the unique cache key is not found
          # - Helps speed up builds when Gemfile.lock changes slightly
          restore-keys: |
            ${{ runner.os }}-gems-${{ hashFiles('Gemfile') }}
            ${{ runner.os }}-gems-

      - name: Build and push the web stage image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: Dockerfile.production
          target: web
          push: true
          tags: |
            ${{ steps.meta_web.outputs.tags }}
          # Fetch existing build cache from Docker Hub, if available
          cache-from: type=registry,ref=aaronskiba/roadmap:build-cache-web
          # Push the updated build cache to Docker Hub
          cache-to: type=registry,ref=aaronskiba/roadmap:build-cache-web,mode=max
          # SERVER_NAME is used to set `server_name` in nginx.conf
          build-args: |
            SERVER_NAME=uat.library.ualberta.ca
      
      - name: Build and push the api stage image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: Dockerfile.production
          target: api
          push: true
          tags: |
            ${{ steps.meta_api.outputs.tags }}
          cache-from: type=registry,ref=aaronskiba/roadmap:build-cache-api
          cache-to: type=registry,ref=aaronskiba/roadmap:build-cache-api,mode=max
          build-args: |
            SERVER_NAME=api.uat.library.ualberta.ca
